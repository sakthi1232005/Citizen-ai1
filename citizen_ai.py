# -*- coding: utf-8 -*-
"""Citizen Ai.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16rnDfmDY2IuI1unJ-0g_S6xwv65jVYSg
"""

pip install torch transformers gradio

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# -----------------------------
# Load Granite Model
# -----------------------------
model_name = "ibm-granite/granite-3.2-2b-instruct"

print("üîÑ Loading model, please wait...")
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

# Ensure pad token is set
if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

print("‚úÖ Model loaded successfully!")


# -----------------------------
# Helper Functions
# -----------------------------
def generate_response(prompt, max_length=1024):
    """Generate text response using Granite model"""
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response


def city_analysis(city_name):
    """AI-based safety analysis of a city"""
    prompt = (
        f"Provide a detailed analysis of {city_name} including:\n"
        f"1. Crime Index and safety statistics\n"
        f"2. Accident rates and traffic safety information\n"
        f"3. Overall safety assessment\n\n"
        f"City: {city_name}\nAnalysis:"
    )
    return generate_response(prompt, max_length=1000)


def citizen_interaction(query):
    """Answer queries related to government and civic issues"""
    prompt = (
        f"As a government assistant, provide accurate and helpful information about the "
        f"following citizen query related to public services, government policies, or civic issues:\n\n"
        f"Query: {query}\nResponse:"
    )
    return generate_response(prompt, max_length=1000)


# -----------------------------
# Build Gradio Interface
# -----------------------------
with gr.Blocks() as app:
    gr.Markdown("# üèôÔ∏è City Analysis & Citizen Services AI")
    gr.Markdown(
        "This AI assistant can:\n"
        "- Analyze a city‚Äôs safety (crime & accidents)\n"
        "- Answer questions about public services and policies"
    )

    with gr.Tabs():
        # --- City Analysis Tab ---
        with gr.TabItem("City Analysis"):
            with gr.Row():
                with gr.Column():
                    city_input = gr.Textbox(
                        label="Enter City Name",
                        placeholder="e.g., New York, London, Mumbai...",
                        lines=1
                    )
                    analyze_btn = gr.Button("üîç Analyze City")

                with gr.Column():
                    city_output = gr.Textbox(
                        label="City Analysis (Crime Index & Accidents)",
                        lines=15
                    )

            analyze_btn.click(city_analysis, inputs=city_input, outputs=city_output)

        # --- Citizen Services Tab ---
        with gr.TabItem("Citizen Services"):
            with gr.Row():
                with gr.Column():
                    citizen_query = gr.Textbox(
                        label="Your Query",
                        placeholder="Ask about public services, government policies, civic issues...",
                        lines=4
                    )
                    query_btn = gr.Button("üì¢ Get Information")

                with gr.Column():
                    citizen_output = gr.Textbox(
                        label="Government Response",
                        lines=15
                    )

            query_btn.click(citizen_interaction, inputs=citizen_query, outputs=citizen_output)

# -----------------------------
# Launch App
# -----------------------------
if __name__ == "__main__":
    app.launch(share=True)